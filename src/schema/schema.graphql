### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Emojimood {
  colorOne: String!
  colorTwo: String!
  id: Int!
  Profile(after: ProfileWhereUniqueInput, before: ProfileWhereUniqueInput, first: Int, last: Int): [Profile!]!
}

input EmojimoodCreateInput {
  colorOne: String!
  colorTwo: String!
  Profile: ProfileCreateManyWithoutEmojimoodInput
}

input EmojimoodCreateOneWithoutProfileInput {
  connect: EmojimoodWhereUniqueInput
  create: EmojimoodCreateWithoutProfileInput
}

input EmojimoodCreateWithoutProfileInput {
  colorOne: String!
  colorTwo: String!
}

input EmojimoodUpdateOneWithoutProfileInput {
  connect: EmojimoodWhereUniqueInput
  create: EmojimoodCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: EmojimoodUpdateWithoutProfileDataInput
  upsert: EmojimoodUpsertWithoutProfileInput
}

input EmojimoodUpdateWithoutProfileDataInput {
  colorOne: StringFieldUpdateOperationsInput
  colorTwo: StringFieldUpdateOperationsInput
}

input EmojimoodUpsertWithoutProfileInput {
  create: EmojimoodCreateWithoutProfileInput!
  update: EmojimoodUpdateWithoutProfileDataInput!
}

input EmojimoodWhereInput {
  AND: [EmojimoodWhereInput!]
  colorOne: StringFilter
  colorTwo: StringFilter
  id: IntFilter
  NOT: [EmojimoodWhereInput!]
  OR: [EmojimoodWhereInput!]
  Profile: ProfileListRelationFilter
}

input EmojimoodWhereUniqueInput {
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createEmojimood(data: EmojimoodCreateInput!): Emojimood!
  createUser(data: UserCreateInput!): User!
  deleteOneProfile(where: ProfileWhereUniqueInput!): Profile
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Profile {
  bio: String
  emojimood: Emojimood
  id: Int!
  User: User
}

input ProfileCreateManyWithoutEmojimoodInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutEmojimoodInput!]
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutEmojimoodInput {
  bio: String
  user: Int!
  User: UserCreateOneWithoutProfileInput
}

input ProfileCreateWithoutUserInput {
  bio: String
  emojimood: EmojimoodCreateOneWithoutProfileInput
  user: Int!
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  none: ProfileWhereInput
  some: ProfileWhereInput
}

input ProfileUpdateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserDataInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserDataInput {
  bio: NullableStringFieldUpdateOperationsInput
  emojimood: EmojimoodUpdateOneWithoutProfileInput
  user: IntFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserDataInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  bio: StringNullableFilter
  emojimood: EmojimoodWhereInput
  emojimoodId: IntNullableFilter
  id: IntFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  user: IntFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input ProfileWhereUniqueInput {
  id: Int
  user: Int
  userId: Int
}

type Query {
  allEmojimoods(after: EmojimoodWhereUniqueInput, before: EmojimoodWhereUniqueInput, first: Int, last: Int): [Emojimood!]!

  """Find a single user by their id"""
  findUser(id: Int, name: String): User
  SearchUsers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: Int!
  name: String
  profile: Profile
  VenueAdministration(after: VenueAdministrationWhereUniqueInput, before: VenueAdministrationWhereUniqueInput, first: Int, last: Int): [Profile!]!
  venues(after: VenueWhereUniqueInput, before: VenueWhereUniqueInput, first: Int, last: Int): [Venue!]!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
  VenueAdministration: VenueAdministrationCreateManyWithoutAdminsInput
  venues: VenueCreateManyWithoutUserInput
}

input UserCreateManyWithoutVenueAdministrationInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutVenueAdministrationInput!]
}

input UserCreateOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProfileInput
}

input UserCreateOneWithoutVenuesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVenuesInput
}

input UserCreateWithoutProfileInput {
  createdAt: DateTime
  email: String!
  name: String
  VenueAdministration: VenueAdministrationCreateManyWithoutAdminsInput
  venues: VenueCreateManyWithoutUserInput
}

input UserCreateWithoutVenueAdministrationInput {
  createdAt: DateTime
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
  venues: VenueCreateManyWithoutUserInput
}

input UserCreateWithoutVenuesInput {
  createdAt: DateTime
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
  VenueAdministration: VenueAdministrationCreateManyWithoutAdminsInput
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  VenueAdministration: VenueAdministrationUpdateManyWithoutAdminsInput
  venues: VenueUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyWithoutVenueAdministrationInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutVenueAdministrationInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutVenueAdministrationInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutVenueAdministrationInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutVenuesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVenuesInput
  update: UserUpdateWithoutVenuesDataInput
  upsert: UserUpsertWithoutVenuesInput
}

input UserUpdateWithoutVenueAdministrationDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  venues: VenueUpdateManyWithoutUserInput
}

input UserUpdateWithoutVenuesDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  VenueAdministration: VenueAdministrationUpdateManyWithoutAdminsInput
}

input UserUpdateWithWhereUniqueWithoutVenueAdministrationInput {
  data: UserUpdateWithoutVenueAdministrationDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutVenuesInput {
  create: UserCreateWithoutVenuesInput!
  update: UserUpdateWithoutVenuesDataInput!
}

input UserUpsertWithWhereUniqueWithoutVenueAdministrationInput {
  create: UserCreateWithoutVenueAdministrationInput!
  update: UserUpdateWithoutVenueAdministrationDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  profile: ProfileWhereInput
  VenueAdministration: VenueAdministrationListRelationFilter
  venues: VenueListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Venue {
  id: Int!
  VenueDetails: VenueDetails!
}

input VenueAdministrationCreateManyWithoutAdminsInput {
  connect: [VenueAdministrationWhereUniqueInput!]
  create: [VenueAdministrationCreateWithoutAdminsInput!]
}

input VenueAdministrationCreateOneWithoutVenueInput {
  connect: VenueAdministrationWhereUniqueInput
  create: VenueAdministrationCreateWithoutVenueInput
}

input VenueAdministrationCreateWithoutAdminsInput {
  venue: VenueCreateOneWithoutVenueAdministrationInput
}

input VenueAdministrationCreateWithoutVenueInput {
  admins: UserCreateManyWithoutVenueAdministrationInput
}

input VenueAdministrationListRelationFilter {
  every: VenueAdministrationWhereInput
  none: VenueAdministrationWhereInput
  some: VenueAdministrationWhereInput
}

input VenueAdministrationScalarWhereInput {
  AND: [VenueAdministrationScalarWhereInput!]
  id: IntFilter
  NOT: [VenueAdministrationScalarWhereInput!]
  OR: [VenueAdministrationScalarWhereInput!]
}

input VenueAdministrationUpdateManyDataInput

input VenueAdministrationUpdateManyWithoutAdminsInput {
  connect: [VenueAdministrationWhereUniqueInput!]
  create: [VenueAdministrationCreateWithoutAdminsInput!]
  delete: [VenueAdministrationWhereUniqueInput!]
  deleteMany: [VenueAdministrationScalarWhereInput!]
  disconnect: [VenueAdministrationWhereUniqueInput!]
  set: [VenueAdministrationWhereUniqueInput!]
  update: [VenueAdministrationUpdateWithWhereUniqueWithoutAdminsInput!]
  updateMany: [VenueAdministrationUpdateManyWithWhereNestedInput!]
  upsert: [VenueAdministrationUpsertWithWhereUniqueWithoutAdminsInput!]
}

input VenueAdministrationUpdateManyWithWhereNestedInput {
  data: VenueAdministrationUpdateManyDataInput!
  where: VenueAdministrationScalarWhereInput!
}

input VenueAdministrationUpdateOneRequiredWithoutVenueInput {
  connect: VenueAdministrationWhereUniqueInput
  create: VenueAdministrationCreateWithoutVenueInput
  update: VenueAdministrationUpdateWithoutVenueDataInput
  upsert: VenueAdministrationUpsertWithoutVenueInput
}

input VenueAdministrationUpdateWithoutAdminsDataInput {
  venue: VenueUpdateOneWithoutVenueAdministrationInput
}

input VenueAdministrationUpdateWithoutVenueDataInput {
  admins: UserUpdateManyWithoutVenueAdministrationInput
}

input VenueAdministrationUpdateWithWhereUniqueWithoutAdminsInput {
  data: VenueAdministrationUpdateWithoutAdminsDataInput!
  where: VenueAdministrationWhereUniqueInput!
}

input VenueAdministrationUpsertWithoutVenueInput {
  create: VenueAdministrationCreateWithoutVenueInput!
  update: VenueAdministrationUpdateWithoutVenueDataInput!
}

input VenueAdministrationUpsertWithWhereUniqueWithoutAdminsInput {
  create: VenueAdministrationCreateWithoutAdminsInput!
  update: VenueAdministrationUpdateWithoutAdminsDataInput!
  where: VenueAdministrationWhereUniqueInput!
}

input VenueAdministrationWhereInput {
  admins: UserListRelationFilter
  AND: [VenueAdministrationWhereInput!]
  id: IntFilter
  NOT: [VenueAdministrationWhereInput!]
  OR: [VenueAdministrationWhereInput!]
  venue: VenueWhereInput
}

input VenueAdministrationWhereUniqueInput {
  id: Int
}

input VenueCreateManyWithoutUserInput {
  connect: [VenueWhereUniqueInput!]
  create: [VenueCreateWithoutUserInput!]
}

input VenueCreateOneWithoutVenueAdministrationInput {
  connect: VenueWhereUniqueInput
  create: VenueCreateWithoutVenueAdministrationInput
}

input VenueCreateWithoutUserInput {
  createdAt: DateTime
  VenueAdministration: VenueAdministrationCreateOneWithoutVenueInput!
  VenueDetails: VenueDetailsCreateOneWithoutVenueInput!
}

input VenueCreateWithoutVenueAdministrationInput {
  createdAt: DateTime
  User: UserCreateOneWithoutVenuesInput!
  VenueDetails: VenueDetailsCreateOneWithoutVenueInput!
}

type VenueDetails {
  description: String!
  id: Int!
  name: String!
}

input VenueDetailsCreateOneWithoutVenueInput {
  connect: VenueDetailsWhereUniqueInput
  create: VenueDetailsCreateWithoutVenueInput
}

input VenueDetailsCreateWithoutVenueInput {
  description: String!
  name: String!
}

input VenueDetailsUpdateOneRequiredWithoutVenueInput {
  connect: VenueDetailsWhereUniqueInput
  create: VenueDetailsCreateWithoutVenueInput
  update: VenueDetailsUpdateWithoutVenueDataInput
  upsert: VenueDetailsUpsertWithoutVenueInput
}

input VenueDetailsUpdateWithoutVenueDataInput {
  description: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VenueDetailsUpsertWithoutVenueInput {
  create: VenueDetailsCreateWithoutVenueInput!
  update: VenueDetailsUpdateWithoutVenueDataInput!
}

input VenueDetailsWhereInput {
  AND: [VenueDetailsWhereInput!]
  description: StringFilter
  id: IntFilter
  name: StringFilter
  NOT: [VenueDetailsWhereInput!]
  OR: [VenueDetailsWhereInput!]
  Venue: VenueWhereInput
}

input VenueDetailsWhereUniqueInput {
  id: Int
}

input VenueListRelationFilter {
  every: VenueWhereInput
  none: VenueWhereInput
  some: VenueWhereInput
}

input VenueScalarWhereInput {
  AND: [VenueScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [VenueScalarWhereInput!]
  OR: [VenueScalarWhereInput!]
  userId: IntFilter
  venueAdministrationId: IntFilter
  venueDetailsId: IntFilter
}

input VenueUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateManyWithoutUserInput {
  connect: [VenueWhereUniqueInput!]
  create: [VenueCreateWithoutUserInput!]
  delete: [VenueWhereUniqueInput!]
  deleteMany: [VenueScalarWhereInput!]
  disconnect: [VenueWhereUniqueInput!]
  set: [VenueWhereUniqueInput!]
  update: [VenueUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VenueUpdateManyWithWhereNestedInput!]
  upsert: [VenueUpsertWithWhereUniqueWithoutUserInput!]
}

input VenueUpdateManyWithWhereNestedInput {
  data: VenueUpdateManyDataInput!
  where: VenueScalarWhereInput!
}

input VenueUpdateOneWithoutVenueAdministrationInput {
  connect: VenueWhereUniqueInput
  create: VenueCreateWithoutVenueAdministrationInput
  delete: Boolean
  disconnect: Boolean
  update: VenueUpdateWithoutVenueAdministrationDataInput
  upsert: VenueUpsertWithoutVenueAdministrationInput
}

input VenueUpdateWithoutUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  VenueAdministration: VenueAdministrationUpdateOneRequiredWithoutVenueInput
  VenueDetails: VenueDetailsUpdateOneRequiredWithoutVenueInput
}

input VenueUpdateWithoutVenueAdministrationDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutVenuesInput
  VenueDetails: VenueDetailsUpdateOneRequiredWithoutVenueInput
}

input VenueUpdateWithWhereUniqueWithoutUserInput {
  data: VenueUpdateWithoutUserDataInput!
  where: VenueWhereUniqueInput!
}

input VenueUpsertWithoutVenueAdministrationInput {
  create: VenueCreateWithoutVenueAdministrationInput!
  update: VenueUpdateWithoutVenueAdministrationDataInput!
}

input VenueUpsertWithWhereUniqueWithoutUserInput {
  create: VenueCreateWithoutUserInput!
  update: VenueUpdateWithoutUserDataInput!
  where: VenueWhereUniqueInput!
}

input VenueWhereInput {
  AND: [VenueWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  User: UserWhereInput
  userId: IntFilter
  VenueAdministration: VenueAdministrationWhereInput
  venueAdministrationId: IntFilter
  VenueDetails: VenueDetailsWhereInput
  venueDetailsId: IntFilter
}

input VenueWhereUniqueInput {
  id: Int
  venueAdministrationId: Int
  venueDetailsId: Int
}

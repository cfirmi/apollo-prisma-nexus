### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BusinessAccount {
  id: Int!
  VenueAdministration(after: VenueAdministrationWhereUniqueInput, before: VenueAdministrationWhereUniqueInput, first: Int, last: Int): [VenueAdministration!]!
}

input BusinessAccountCreateManyWithoutVenueAdministrationInput {
  connect: [BusinessAccountWhereUniqueInput!]
  connectOrCreate: [BusinessAccountCreateOrConnectWithoutVenueAdministrationInput!]
  create: [BusinessAccountCreateWithoutVenueAdministrationInput!]
}

input BusinessAccountCreateOneWithoutUserInput {
  connect: BusinessAccountWhereUniqueInput
  connectOrCreate: BusinessAccountCreateOrConnectWithoutUserInput
  create: BusinessAccountCreateWithoutUserInput
}

input BusinessAccountCreateOneWithoutVenueInput {
  connect: BusinessAccountWhereUniqueInput
  connectOrCreate: BusinessAccountCreateOrConnectWithoutVenueInput
  create: BusinessAccountCreateWithoutVenueInput
}

input BusinessAccountCreateOrConnectWithoutUserInput {
  create: BusinessAccountCreateWithoutUserInput!
  where: BusinessAccountWhereUniqueInput!
}

input BusinessAccountCreateOrConnectWithoutVenueAdministrationInput {
  create: BusinessAccountCreateWithoutVenueAdministrationInput!
  where: BusinessAccountWhereUniqueInput!
}

input BusinessAccountCreateOrConnectWithoutVenueInput {
  create: BusinessAccountCreateWithoutVenueInput!
  where: BusinessAccountWhereUniqueInput!
}

input BusinessAccountCreateWithoutUserInput {
  createdAt: DateTime
  Venue: VenueCreateManyWithoutBusinessAccountInput
  VenueAdministration: VenueAdministrationCreateManyWithoutAdminsBusinessAccountInput
}

input BusinessAccountCreateWithoutVenueAdministrationInput {
  createdAt: DateTime
  User: UserCreateOneWithoutBusinessAccountInput
  Venue: VenueCreateManyWithoutBusinessAccountInput
}

input BusinessAccountCreateWithoutVenueInput {
  createdAt: DateTime
  User: UserCreateOneWithoutBusinessAccountInput
  VenueAdministration: VenueAdministrationCreateManyWithoutAdminsBusinessAccountInput
}

input BusinessAccountListRelationFilter {
  every: BusinessAccountWhereInput
  none: BusinessAccountWhereInput
  some: BusinessAccountWhereInput
}

input BusinessAccountScalarWhereInput {
  AND: [BusinessAccountScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [BusinessAccountScalarWhereInput!]
  OR: [BusinessAccountScalarWhereInput!]
}

input BusinessAccountUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input BusinessAccountUpdateManyWithoutVenueAdministrationInput {
  connect: [BusinessAccountWhereUniqueInput!]
  connectOrCreate: [BusinessAccountCreateOrConnectWithoutVenueAdministrationInput!]
  create: [BusinessAccountCreateWithoutVenueAdministrationInput!]
  delete: [BusinessAccountWhereUniqueInput!]
  deleteMany: [BusinessAccountScalarWhereInput!]
  disconnect: [BusinessAccountWhereUniqueInput!]
  set: [BusinessAccountWhereUniqueInput!]
  update: [BusinessAccountUpdateWithWhereUniqueWithoutVenueAdministrationInput!]
  updateMany: [BusinessAccountUpdateManyWithWhereWithoutVenueAdministrationInput!]
  upsert: [BusinessAccountUpsertWithWhereUniqueWithoutVenueAdministrationInput!]
}

input BusinessAccountUpdateManyWithWhereWithoutVenueAdministrationInput {
  data: BusinessAccountUpdateManyMutationInput!
  where: BusinessAccountScalarWhereInput!
}

input BusinessAccountUpdateOneWithoutUserInput {
  connect: BusinessAccountWhereUniqueInput
  connectOrCreate: BusinessAccountCreateOrConnectWithoutUserInput
  create: BusinessAccountCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: BusinessAccountUpdateWithoutUserInput
  upsert: BusinessAccountUpsertWithoutUserInput
}

input BusinessAccountUpdateOneWithoutVenueInput {
  connect: BusinessAccountWhereUniqueInput
  connectOrCreate: BusinessAccountCreateOrConnectWithoutVenueInput
  create: BusinessAccountCreateWithoutVenueInput
  delete: Boolean
  disconnect: Boolean
  update: BusinessAccountUpdateWithoutVenueInput
  upsert: BusinessAccountUpsertWithoutVenueInput
}

input BusinessAccountUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateManyWithoutBusinessAccountInput
  VenueAdministration: VenueAdministrationUpdateManyWithoutAdminsBusinessAccountInput
}

input BusinessAccountUpdateWithoutVenueAdministrationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneWithoutBusinessAccountInput
  Venue: VenueUpdateManyWithoutBusinessAccountInput
}

input BusinessAccountUpdateWithoutVenueInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneWithoutBusinessAccountInput
  VenueAdministration: VenueAdministrationUpdateManyWithoutAdminsBusinessAccountInput
}

input BusinessAccountUpdateWithWhereUniqueWithoutVenueAdministrationInput {
  data: BusinessAccountUpdateWithoutVenueAdministrationInput!
  where: BusinessAccountWhereUniqueInput!
}

input BusinessAccountUpsertWithoutUserInput {
  create: BusinessAccountCreateWithoutUserInput!
  update: BusinessAccountUpdateWithoutUserInput!
}

input BusinessAccountUpsertWithoutVenueInput {
  create: BusinessAccountCreateWithoutVenueInput!
  update: BusinessAccountUpdateWithoutVenueInput!
}

input BusinessAccountUpsertWithWhereUniqueWithoutVenueAdministrationInput {
  create: BusinessAccountCreateWithoutVenueAdministrationInput!
  update: BusinessAccountUpdateWithoutVenueAdministrationInput!
  where: BusinessAccountWhereUniqueInput!
}

input BusinessAccountWhereInput {
  AND: [BusinessAccountWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [BusinessAccountWhereInput!]
  OR: [BusinessAccountWhereInput!]
  User: UserWhereInput
  Venue: VenueListRelationFilter
  VenueAdministration: VenueAdministrationListRelationFilter
}

input BusinessAccountWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Emojimood {
  colorOne: String!
  colorTwo: String!
  id: Int!
  Profile(after: ProfileWhereUniqueInput, before: ProfileWhereUniqueInput, first: Int, last: Int): [Profile!]!
}

input EmojimoodCreateInput {
  colorOne: String!
  colorTwo: String!
  Profile: ProfileCreateManyWithoutEmojimoodInput
}

input EmojimoodCreateOneWithoutProfileInput {
  connect: EmojimoodWhereUniqueInput
  connectOrCreate: EmojimoodCreateOrConnectWithoutProfileInput
  create: EmojimoodCreateWithoutProfileInput
}

input EmojimoodCreateOrConnectWithoutProfileInput {
  create: EmojimoodCreateWithoutProfileInput!
  where: EmojimoodWhereUniqueInput!
}

input EmojimoodCreateWithoutProfileInput {
  colorOne: String!
  colorTwo: String!
}

input EmojimoodUpdateInput {
  colorOne: StringFieldUpdateOperationsInput
  colorTwo: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateManyWithoutEmojimoodInput
}

input EmojimoodUpdateOneWithoutProfileInput {
  connect: EmojimoodWhereUniqueInput
  connectOrCreate: EmojimoodCreateOrConnectWithoutProfileInput
  create: EmojimoodCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: EmojimoodUpdateWithoutProfileInput
  upsert: EmojimoodUpsertWithoutProfileInput
}

input EmojimoodUpdateWithoutProfileInput {
  colorOne: StringFieldUpdateOperationsInput
  colorTwo: StringFieldUpdateOperationsInput
}

input EmojimoodUpsertWithoutProfileInput {
  create: EmojimoodCreateWithoutProfileInput!
  update: EmojimoodUpdateWithoutProfileInput!
}

input EmojimoodWhereInput {
  AND: [EmojimoodWhereInput!]
  colorOne: StringFilter
  colorTwo: StringFilter
  id: IntFilter
  NOT: [EmojimoodWhereInput!]
  OR: [EmojimoodWhereInput!]
  Profile: ProfileListRelationFilter
}

input EmojimoodWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createEmojimood(data: EmojimoodCreateInput!): Emojimood!
  createOneVenue(data: VenueCreateInput!): Venue!
  createUser(data: UserCreateInput!): User!
  updateOneEmojimood(data: EmojimoodUpdateInput!, where: EmojimoodWhereUniqueInput!): Emojimood
  updateOneProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneVenue(data: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Profile {
  bio: String
  Emojimood: Emojimood
  emojimoodId: Int
  id: Int!
  User: User
}

input ProfileCreateManyWithoutEmojimoodInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutEmojimoodInput!]
  create: [ProfileCreateWithoutEmojimoodInput!]
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutEmojimoodInput {
  create: ProfileCreateWithoutEmojimoodInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutEmojimoodInput {
  bio: String
  User: UserCreateOneWithoutProfileInput
}

input ProfileCreateWithoutUserInput {
  bio: String
  Emojimood: EmojimoodCreateOneWithoutProfileInput
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  none: ProfileWhereInput
  some: ProfileWhereInput
}

input ProfileScalarWhereInput {
  AND: [ProfileScalarWhereInput!]
  bio: StringNullableFilter
  emojimoodId: IntNullableFilter
  id: IntFilter
  NOT: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  userId: IntNullableFilter
}

input ProfileUpdateInput {
  bio: NullableStringFieldUpdateOperationsInput
  Emojimood: EmojimoodUpdateOneWithoutProfileInput
  User: UserUpdateOneWithoutProfileInput
}

input ProfileUpdateManyMutationInput {
  bio: NullableStringFieldUpdateOperationsInput
}

input ProfileUpdateManyWithoutEmojimoodInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutEmojimoodInput!]
  create: [ProfileCreateWithoutEmojimoodInput!]
  delete: [ProfileWhereUniqueInput!]
  deleteMany: [ProfileScalarWhereInput!]
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutEmojimoodInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutEmojimoodInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutEmojimoodInput!]
}

input ProfileUpdateManyWithWhereWithoutEmojimoodInput {
  data: ProfileUpdateManyMutationInput!
  where: ProfileScalarWhereInput!
}

input ProfileUpdateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutEmojimoodInput {
  bio: NullableStringFieldUpdateOperationsInput
  User: UserUpdateOneWithoutProfileInput
}

input ProfileUpdateWithoutUserInput {
  bio: NullableStringFieldUpdateOperationsInput
  Emojimood: EmojimoodUpdateOneWithoutProfileInput
}

input ProfileUpdateWithWhereUniqueWithoutEmojimoodInput {
  data: ProfileUpdateWithoutEmojimoodInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
}

input ProfileUpsertWithWhereUniqueWithoutEmojimoodInput {
  create: ProfileCreateWithoutEmojimoodInput!
  update: ProfileUpdateWithoutEmojimoodInput!
  where: ProfileWhereUniqueInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  bio: StringNullableFilter
  Emojimood: EmojimoodWhereInput
  emojimoodId: IntNullableFilter
  id: IntFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input ProfileWhereUniqueInput {
  id: Int
  userId: Int
}

type Query {
  allEmojimoods(after: EmojimoodWhereUniqueInput, before: EmojimoodWhereUniqueInput, first: Int, last: Int): [Emojimood!]!

  """Find a single user by their id"""
  findUser(id: Int, name: String): User
  SearchUsers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
  venues(after: VenueWhereUniqueInput, before: VenueWhereUniqueInput, first: Int, last: Int): [Venue!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  BusinessAccount: Profile
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String
  profile: Profile
}

input UserCreateInput {
  BusinessAccount: BusinessAccountCreateOneWithoutUserInput
  createdAt: DateTime
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
}

input UserCreateOneWithoutBusinessAccountInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBusinessAccountInput
  create: UserCreateWithoutBusinessAccountInput
}

input UserCreateOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutprofileInput
  create: UserCreateWithoutProfileInput
}

input UserCreateOrConnectWithoutBusinessAccountInput {
  create: UserCreateWithoutBusinessAccountInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutprofileInput {
  create: UserCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutBusinessAccountInput {
  createdAt: DateTime
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
}

input UserCreateWithoutProfileInput {
  BusinessAccount: BusinessAccountCreateOneWithoutUserInput
  createdAt: DateTime
  email: String!
  name: String
}

input UserUpdateInput {
  BusinessAccount: BusinessAccountUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
}

input UserUpdateOneWithoutBusinessAccountInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBusinessAccountInput
  create: UserCreateWithoutBusinessAccountInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutBusinessAccountInput
  upsert: UserUpsertWithoutBusinessAccountInput
}

input UserUpdateOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutprofileInput
  create: UserCreateWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateWithoutBusinessAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutProfileInput {
  BusinessAccount: BusinessAccountUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutBusinessAccountInput {
  create: UserCreateWithoutBusinessAccountInput!
  update: UserUpdateWithoutBusinessAccountInput!
}

input UserUpsertWithoutProfileInput {
  create: UserCreateWithoutProfileInput!
  update: UserUpdateWithoutProfileInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  BusinessAccount: BusinessAccountWhereInput
  businessAccountId: IntNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  profile: ProfileWhereInput
}

input UserWhereUniqueInput {
  businessAccountId: Int
  email: String
  id: Int
}

type Venue {
  businessAccount: BusinessAccount
  id: Int!
  VenueAdministration: VenueAdministration!
  VenueDetails: VenueDetails!
  venueDetailsId: Int!
}

type VenueAdministration {
  AdminsBusinessAccount(after: BusinessAccountWhereUniqueInput, before: BusinessAccountWhereUniqueInput, first: Int, last: Int): [BusinessAccount!]!
  id: Int!
  knalb: String
  Venue: Venue
}

input VenueAdministrationCreateManyWithoutAdminsBusinessAccountInput {
  connect: [VenueAdministrationWhereUniqueInput!]
  connectOrCreate: [VenueAdministrationCreateOrConnectWithoutAdminsBusinessAccountInput!]
  create: [VenueAdministrationCreateWithoutAdminsBusinessAccountInput!]
}

input VenueAdministrationCreateOneWithoutVenueInput {
  connect: VenueAdministrationWhereUniqueInput
  connectOrCreate: VenueAdministrationCreateOrConnectWithoutVenueInput
  create: VenueAdministrationCreateWithoutVenueInput
}

input VenueAdministrationCreateOrConnectWithoutAdminsBusinessAccountInput {
  create: VenueAdministrationCreateWithoutAdminsBusinessAccountInput!
  where: VenueAdministrationWhereUniqueInput!
}

input VenueAdministrationCreateOrConnectWithoutVenueInput {
  create: VenueAdministrationCreateWithoutVenueInput!
  where: VenueAdministrationWhereUniqueInput!
}

input VenueAdministrationCreateWithoutAdminsBusinessAccountInput {
  knalb: String
  Venue: VenueCreateOneWithoutVenueAdministrationInput
}

input VenueAdministrationCreateWithoutVenueInput {
  AdminsBusinessAccount: BusinessAccountCreateManyWithoutVenueAdministrationInput
  knalb: String
}

input VenueAdministrationListRelationFilter {
  every: VenueAdministrationWhereInput
  none: VenueAdministrationWhereInput
  some: VenueAdministrationWhereInput
}

input VenueAdministrationScalarWhereInput {
  AND: [VenueAdministrationScalarWhereInput!]
  id: IntFilter
  knalb: StringNullableFilter
  NOT: [VenueAdministrationScalarWhereInput!]
  OR: [VenueAdministrationScalarWhereInput!]
}

input VenueAdministrationUpdateManyMutationInput {
  knalb: NullableStringFieldUpdateOperationsInput
}

input VenueAdministrationUpdateManyWithoutAdminsBusinessAccountInput {
  connect: [VenueAdministrationWhereUniqueInput!]
  connectOrCreate: [VenueAdministrationCreateOrConnectWithoutAdminsBusinessAccountInput!]
  create: [VenueAdministrationCreateWithoutAdminsBusinessAccountInput!]
  delete: [VenueAdministrationWhereUniqueInput!]
  deleteMany: [VenueAdministrationScalarWhereInput!]
  disconnect: [VenueAdministrationWhereUniqueInput!]
  set: [VenueAdministrationWhereUniqueInput!]
  update: [VenueAdministrationUpdateWithWhereUniqueWithoutAdminsBusinessAccountInput!]
  updateMany: [VenueAdministrationUpdateManyWithWhereWithoutAdminsBusinessAccountInput!]
  upsert: [VenueAdministrationUpsertWithWhereUniqueWithoutAdminsBusinessAccountInput!]
}

input VenueAdministrationUpdateManyWithWhereWithoutAdminsBusinessAccountInput {
  data: VenueAdministrationUpdateManyMutationInput!
  where: VenueAdministrationScalarWhereInput!
}

input VenueAdministrationUpdateOneRequiredWithoutVenueInput {
  connect: VenueAdministrationWhereUniqueInput
  connectOrCreate: VenueAdministrationCreateOrConnectWithoutVenueInput
  create: VenueAdministrationCreateWithoutVenueInput
  update: VenueAdministrationUpdateWithoutVenueInput
  upsert: VenueAdministrationUpsertWithoutVenueInput
}

input VenueAdministrationUpdateWithoutAdminsBusinessAccountInput {
  knalb: NullableStringFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueAdministrationInput
}

input VenueAdministrationUpdateWithoutVenueInput {
  AdminsBusinessAccount: BusinessAccountUpdateManyWithoutVenueAdministrationInput
  knalb: NullableStringFieldUpdateOperationsInput
}

input VenueAdministrationUpdateWithWhereUniqueWithoutAdminsBusinessAccountInput {
  data: VenueAdministrationUpdateWithoutAdminsBusinessAccountInput!
  where: VenueAdministrationWhereUniqueInput!
}

input VenueAdministrationUpsertWithoutVenueInput {
  create: VenueAdministrationCreateWithoutVenueInput!
  update: VenueAdministrationUpdateWithoutVenueInput!
}

input VenueAdministrationUpsertWithWhereUniqueWithoutAdminsBusinessAccountInput {
  create: VenueAdministrationCreateWithoutAdminsBusinessAccountInput!
  update: VenueAdministrationUpdateWithoutAdminsBusinessAccountInput!
  where: VenueAdministrationWhereUniqueInput!
}

input VenueAdministrationWhereInput {
  AdminsBusinessAccount: BusinessAccountListRelationFilter
  AND: [VenueAdministrationWhereInput!]
  id: IntFilter
  knalb: StringNullableFilter
  NOT: [VenueAdministrationWhereInput!]
  OR: [VenueAdministrationWhereInput!]
  Venue: VenueWhereInput
}

input VenueAdministrationWhereUniqueInput {
  id: Int
}

input VenueCreateInput {
  businessAccount: BusinessAccountCreateOneWithoutVenueInput
  createdAt: DateTime
  VenueAdministration: VenueAdministrationCreateOneWithoutVenueInput!
  VenueDetails: VenueDetailsCreateOneWithoutVenueInput!
}

input VenueCreateManyWithoutBusinessAccountInput {
  connect: [VenueWhereUniqueInput!]
  connectOrCreate: [VenueCreateOrConnectWithoutbusinessAccountInput!]
  create: [VenueCreateWithoutBusinessAccountInput!]
}

input VenueCreateOneWithoutVenueAdministrationInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueAdministrationInput
  create: VenueCreateWithoutVenueAdministrationInput
}

input VenueCreateOrConnectWithoutbusinessAccountInput {
  create: VenueCreateWithoutBusinessAccountInput!
  where: VenueWhereUniqueInput!
}

input VenueCreateOrConnectWithoutVenueAdministrationInput {
  create: VenueCreateWithoutVenueAdministrationInput!
  where: VenueWhereUniqueInput!
}

input VenueCreateWithoutBusinessAccountInput {
  createdAt: DateTime
  VenueAdministration: VenueAdministrationCreateOneWithoutVenueInput!
  VenueDetails: VenueDetailsCreateOneWithoutVenueInput!
}

input VenueCreateWithoutVenueAdministrationInput {
  businessAccount: BusinessAccountCreateOneWithoutVenueInput
  createdAt: DateTime
  VenueDetails: VenueDetailsCreateOneWithoutVenueInput!
}

type VenueDetails {
  description: String
  id: Int!
  name: String!
  Venue: Venue
}

input VenueDetailsCreateOneWithoutVenueInput {
  connect: VenueDetailsWhereUniqueInput
  connectOrCreate: VenueDetailsCreateOrConnectWithoutVenueInput
  create: VenueDetailsCreateWithoutVenueInput
}

input VenueDetailsCreateOrConnectWithoutVenueInput {
  create: VenueDetailsCreateWithoutVenueInput!
  where: VenueDetailsWhereUniqueInput!
}

input VenueDetailsCreateWithoutVenueInput {
  description: String
  name: String!
}

input VenueDetailsUpdateOneRequiredWithoutVenueInput {
  connect: VenueDetailsWhereUniqueInput
  connectOrCreate: VenueDetailsCreateOrConnectWithoutVenueInput
  create: VenueDetailsCreateWithoutVenueInput
  update: VenueDetailsUpdateWithoutVenueInput
  upsert: VenueDetailsUpsertWithoutVenueInput
}

input VenueDetailsUpdateWithoutVenueInput {
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VenueDetailsUpsertWithoutVenueInput {
  create: VenueDetailsCreateWithoutVenueInput!
  update: VenueDetailsUpdateWithoutVenueInput!
}

input VenueDetailsWhereInput {
  AND: [VenueDetailsWhereInput!]
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  NOT: [VenueDetailsWhereInput!]
  OR: [VenueDetailsWhereInput!]
  Venue: VenueWhereInput
}

input VenueDetailsWhereUniqueInput {
  id: Int
}

input VenueListRelationFilter {
  every: VenueWhereInput
  none: VenueWhereInput
  some: VenueWhereInput
}

input VenueScalarWhereInput {
  AND: [VenueScalarWhereInput!]
  businessAccountId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [VenueScalarWhereInput!]
  OR: [VenueScalarWhereInput!]
  venueAdministrationId: IntFilter
  venueDetailsId: IntFilter
}

input VenueUpdateInput {
  businessAccount: BusinessAccountUpdateOneWithoutVenueInput
  createdAt: DateTimeFieldUpdateOperationsInput
  VenueAdministration: VenueAdministrationUpdateOneRequiredWithoutVenueInput
  VenueDetails: VenueDetailsUpdateOneRequiredWithoutVenueInput
}

input VenueUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateManyWithoutBusinessAccountInput {
  connect: [VenueWhereUniqueInput!]
  connectOrCreate: [VenueCreateOrConnectWithoutbusinessAccountInput!]
  create: [VenueCreateWithoutBusinessAccountInput!]
  delete: [VenueWhereUniqueInput!]
  deleteMany: [VenueScalarWhereInput!]
  disconnect: [VenueWhereUniqueInput!]
  set: [VenueWhereUniqueInput!]
  update: [VenueUpdateWithWhereUniqueWithoutBusinessAccountInput!]
  updateMany: [VenueUpdateManyWithWhereWithoutBusinessAccountInput!]
  upsert: [VenueUpsertWithWhereUniqueWithoutBusinessAccountInput!]
}

input VenueUpdateManyWithWhereWithoutBusinessAccountInput {
  data: VenueUpdateManyMutationInput!
  where: VenueScalarWhereInput!
}

input VenueUpdateOneWithoutVenueAdministrationInput {
  connect: VenueWhereUniqueInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueAdministrationInput
  create: VenueCreateWithoutVenueAdministrationInput
  delete: Boolean
  disconnect: Boolean
  update: VenueUpdateWithoutVenueAdministrationInput
  upsert: VenueUpsertWithoutVenueAdministrationInput
}

input VenueUpdateWithoutBusinessAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  VenueAdministration: VenueAdministrationUpdateOneRequiredWithoutVenueInput
  VenueDetails: VenueDetailsUpdateOneRequiredWithoutVenueInput
}

input VenueUpdateWithoutVenueAdministrationInput {
  businessAccount: BusinessAccountUpdateOneWithoutVenueInput
  createdAt: DateTimeFieldUpdateOperationsInput
  VenueDetails: VenueDetailsUpdateOneRequiredWithoutVenueInput
}

input VenueUpdateWithWhereUniqueWithoutBusinessAccountInput {
  data: VenueUpdateWithoutBusinessAccountInput!
  where: VenueWhereUniqueInput!
}

input VenueUpsertWithoutVenueAdministrationInput {
  create: VenueCreateWithoutVenueAdministrationInput!
  update: VenueUpdateWithoutVenueAdministrationInput!
}

input VenueUpsertWithWhereUniqueWithoutBusinessAccountInput {
  create: VenueCreateWithoutBusinessAccountInput!
  update: VenueUpdateWithoutBusinessAccountInput!
  where: VenueWhereUniqueInput!
}

input VenueWhereInput {
  AND: [VenueWhereInput!]
  businessAccount: BusinessAccountWhereInput
  businessAccountId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  VenueAdministration: VenueAdministrationWhereInput
  venueAdministrationId: IntFilter
  VenueDetails: VenueDetailsWhereInput
  venueDetailsId: IntFilter
}

input VenueWhereUniqueInput {
  id: Int
  venueAdministrationId: Int
  venueDetailsId: Int
}
